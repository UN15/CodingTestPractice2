import java.util.*;
class Solution {
    public int solution(int k, int m, int[] score) {
        int answer = 0;
        Arrays.sort(score);
        for(int i = score.length-1; i-m+1>=0; i-= m){
            answer+=score[i-m+1]*m;
        }
        return answer;
    }
}

class Solution {
    public int solution(int number, int limit, int power) {
        int answer = 0;
        int count = 0;
        int[] arr = new int[number];
        
        for(int i = 1; i<=number; i++){
            count = 0;
            for(int j = 1; j<=Math.sqrt(i); j++){
                if(j*j == i)
                    count++;
                else if(i%j == 0)
                    count+=2;
            }
            arr[i-1] = count;
        }
        for(int i = 0; i<number; i++){
            if(arr[i]>limit)
                answer+=power;
            else
                answer+=arr[i];
        }
        return answer;
    }
}

import java.util.*;
class Solution {
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = new int[commands.length];
        for(int i = 0; i<commands.length; i++){
            int[] n_arr = Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]);
            Arrays.sort(n_arr);
            answer[i] = n_arr[commands[i][2]-1];
        }
        return answer;
    }
}

class Solution {
    public int solution(int a, int b, int n) {
        int answer = 0;
        while(n>=a){
            answer+=(n/a)*b;
            n = (n/a)*b+(n%a);
        }
        return answer;
    }
}

// class Solution {
//     public String[] solution(int n, int[] arr1, int[] arr2) {
//         String[] answer = new String[n];
//         int[][] map1 = new int[n][n];
//         int[][] map2 = new int[n][n];
        
//         for(int i = 0; i<n; i++){
//             int k = arr1[i];
//             int m = arr2[i];
//             for(int j = n-1; j>=1; j--){
//                 map1[i][j] = k%2;
//                 k/=2;
                
//                 map2[i][j] = m%2;
//                 m/=2;
//             }
//             map1[i][0] = k;
//             map2[i][0] = m;
//         }
        
//         for(int i = 0; i<n; i++){
//             answer[i]="";
//             for(int j = 0; j<n; j++){
//                 if(map1[i][j] == 0 && map2[i][j] == 0)
//                     answer[i]+=" ";
//                 else
//                     answer[i]+="#";
//             }
//         }
//         return answer;
//     }
// }
//or

import java.util.*;
class Solution {
    public String[] solution(int n, int[] arr1, int[] arr2) {
        String[] answer = new String[n];
        
        for (int i=0; i<n; i++){
    
            answer[i] = Integer.toBinaryString(arr1[i] | arr2[i]);
            answer[i] = String.format("%" + n + "s", answer[i]);
            answer[i] = answer[i].replace("1", "#");
            answer[i] = answer[i].replace("0", " ");
          
            }
 
        return answer;
    }
}

import java.util.Arrays;
class Solution {
    public int[] solution(int k, int[] score) {
        int[] answer = new int[score.length];
        int[] max = new int[k];
        for(int i = 0; i<k; i++)
            max[i] = 2001;
        for(int i = 0; i<score.length; i++){
            if(i+1<=k){
                max[i] = score[i];
                Arrays.sort(max);
            }
            else{
                if(max[0]<score[i]){
                    max[0] = score[i];
                    Arrays.sort(max);
                }
            }
            
            answer[i] = max[0];
        }
        return answer;
    }
}
or
//이게 더 나은 듯
import java.util.*;
class Solution {
    public int[] solution(int k, int[] score) {
        int[] answer = new int[score.length];
        ArrayList<Integer> max = new ArrayList<>();
        
        for(int i = 0; i<score.length; i++){
            if(i+1<=k){
                max.add(score[i]);
                Collections.sort(max);
            }
            else{
                if(max.get(0)<score[i]){
                    max.set(0, score[i]);
                    Collections.sort(max);
                }
            }
            
            answer[i] = max.get(0);
        }
        return answer;
    }
}
//다른 사람 풀이 Collections.min에 대해 알게 되었음 기억하기!
import java.util.ArrayList;
import java.util.Collections;

class Solution {
    public int[] solution(int k, int[] score) {
    	// 결과를 담을 배열 선언
        int[] answer = new int[score.length];
        
        // 순위를 담을 List 선언
        ArrayList<Integer> rank = new ArrayList<>();
        
        // score를 반복
        for (int i = 0; i < score.length; i++) {
            // score 추가
            rank.add(score[i]);
            
            // rank 리스트의 크기가 k보다 크면 가장 낮은 점수 제거 
            if (rank.size() > k) {
                rank.remove(Collections.min(rank));
            }
            
            // 남은 점수 중 가장 작은 점수 answer에 담기
            answer[i] = Collections.min(rank);
        }
        return answer;
    }
}

class Solution {
    public String solution(String[] cards1, String[] cards2, String[] goal) {
        String answer = "Yes";
        String[] totalCards = new String[cards1.length+cards2.length];
        int idx1 = 0; 
        int idx2 = 0;
        
        for(int i = 0; i<goal.length; i++){
            if(idx1<cards1.length && cards1[idx1].equals(goal[i]))
                idx1++;
            else if(idx2<cards2.length && cards2[idx2].equals(goal[i]))
                idx2++;
            else
                answer = "No";
        }
        return answer;
    }
}

import java.util.Set;
import java.util.HashSet;
class Solution {
    public int solution(int[] nums) {
        int answer = 0;
        Set<Integer> set = new HashSet<>();
        for(int i = 0; i<nums.length; i++){
            set.add(nums[i]);
        }
        answer = set.size();
        
        if(answer > nums.length/2)
            answer = nums.length/2;
        return answer;
    }
}

class Solution {
    public int solution(int n) {
        int answer = 0;
        boolean check = true;
        for(int i = 2; i<=n; i++){
            for(int j = 2; j<=(int)Math.sqrt(i); j++){
                if(i%j == 0){
                    check = false;
                    break;
                }
            }
            if(check)
                answer++;
            check = true;
        }
        return answer;
    }
}

import java.util.ArrayList;
class Solution {
    public int solution(int[] nums) {
        int answer = 0;
        ArrayList<Integer> arr = new ArrayList<>();
        for(int i = 0; i<nums.length-2; i++){
            for(int j = i+1; j<nums.length-1; j++)
                for(int k = j+1; k<nums.length; k++)
                    arr.add(nums[i]+nums[j]+nums[k]);
        }
        boolean flag = true;
        for(int a : arr){
            for(int i = 2; i<=(int)Math.sqrt(a); i++){
                if(a%i == 0){
                    flag = false;
                    break;
                }
            }
            if(flag)
                answer++;
            flag = true;
        }
        
        return answer;
    }
}

class Solution {
    public int solution(int n, int m, int[] section) {
        int answer = 0;
        int[] check = new int[n+1];
        
        for(int i = 0; i<section.length; i++){
            if(check[section[i]] == 0){
                answer++;
                
                for(int j = section[i]; j<section[i]+m && j<n+1; j++)
                    check[j] = 1;
            }
        }
        return answer;
    }
}
//옹알이(2) <= 문제 짱 어렵다 이게 레벨 1이라니 ㅠ 한참 더 발전해야겠다 
//방법 1
import java.util.ArrayList;
import java.util.HashMap;
class Solution {
    public int solution(String[] babbling) {
        int answer = 0;
        HashMap<Character, String> map = new HashMap<>(){{
            put('a', "aya");
            put('y', "ye");
            put('w', "woo");
            put('m', "ma");
        }};
        
        for(int i = 0; i<babbling.length; i++){
            int j = 0;
            String s = babbling[i];
            char prefix = '0';
        
            while(j<s.length()){
                if(prefix == s.charAt(j)) // 전 문자열이랑 후 문자열이 같으면 안되므로 
                    break;
                String w = map.getOrDefault(s.charAt(j), " "); // 문자열 첫 시작이 a, y, w, m인 경우 해당 문자열 가져오고 아닌 경우 " " 로 받기
                if(w.equals(" ")) // 첫 시작이 a, y, w, m으로 시작하지 않는 경우
                    break;
                String sub = s.substring(j, Math.min(s.length(), j+w.length()));
                //s에서 j를 시작으로 자르기
                if(sub.equals(w)){
                    prefix = sub.charAt(0); 
                    j+=w.length();
                }
                else
                    break;      
            }
            
            if(j == s.length())
                answer++;
        }
        return answer;
    }
}

or

class Solution {
    public int solution(String[] babbling) {
        int answer = 0;
        
        for(int i = 0; i<babbling.length; i++){
            String s = babbling[i];
        
            if(s.contains("ayaaya") || s.contains("yeye") ||
               s.contains("woowoo") || s.contains("mama"))
                continue;
            
            s = s.replace("aya", " ");
            s = s.replace("ye", " ");
            s = s.replace("woo", " ");
            s = s.replace("ma", " ");
            s = s.replace(" ","");
            
            if(s.length() == 0)
                answer++;
        }
        return answer;
    }
}


