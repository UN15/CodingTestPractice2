import java.util.Arrays;
class Solution {
    public String solution(String s) {
        String answer = "";
        String[] arr = s.split(" ");
        int[] a = new int[arr.length];
        for(int i = 0; i<arr.length; i++)
            a[i] = Integer.parseInt(arr[i]);
        
        Arrays.sort(a);
        answer+=a[0]+" "+a[a.length-1];
       
        return answer;
    }
}

import java.util.Arrays;
class Solution
{
    public int solution(int []A, int []B)
    {
        int answer = 0;
        
        Arrays.sort(A);
        Arrays.sort(B);  
                
       for(int i = 0; i<A.length; i++)
           answer+=(A[i]*B[B.length-1-i]);
        return answer;
    }
}

import java.util.Stack;
class Solution {
    boolean solution(String s) {
        boolean answer = true;
        Stack<String> st = new Stack();
      
        for(int i = 0; i<s.length(); i++){
            if(s.charAt(i) == '(')
                st.push("(");
            else if(s.charAt(i) == ')'){
                if(st.isEmpty())
                    answer = false;
                else{
                    String p = st.pop();
                    if(!p.equals("("))
                        answer = false;
                }
            } 
        }
        if(!st.isEmpty())
            answer = false;
        return answer;
    }
}

class Solution {
    public int[] solution(String s) {
        int[] answer = new int [2];
        int check = 0;
        
        while(!s.equals("1")){
            answer[0]++;
            String s2 = "";
            for(int i = 0; i<s.length(); i++){
                if(s.charAt(i) != '0')
                    s2+=s.charAt(i);
                else
                    answer[1]++;
            }
            s = Integer.toBinaryString(s2.length());
        }
        return answer;
    }
}


