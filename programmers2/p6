import java.util.Arrays;
class Solution {
    public String solution(String s) {
        String answer = "";
        String[] arr = s.split(" ");
        int[] a = new int[arr.length];
        for(int i = 0; i<arr.length; i++)
            a[i] = Integer.parseInt(arr[i]);
        
        Arrays.sort(a);
        answer+=a[0]+" "+a[a.length-1];
       
        return answer;
    }
}

import java.util.Arrays;
class Solution
{
    public int solution(int []A, int []B)
    {
        int answer = 0;
        
        Arrays.sort(A);
        Arrays.sort(B);  
                
       for(int i = 0; i<A.length; i++)
           answer+=(A[i]*B[B.length-1-i]);
        return answer;
    }
}

import java.util.Stack;
class Solution {
    boolean solution(String s) {
        boolean answer = true;
        Stack<String> st = new Stack();
      
        for(int i = 0; i<s.length(); i++){
            if(s.charAt(i) == '(')
                st.push("(");
            else if(s.charAt(i) == ')'){
                if(st.isEmpty())
                    answer = false;
                else{
                    String p = st.pop();
                    if(!p.equals("("))
                        answer = false;
                }
            } 
        }
        if(!st.isEmpty())
            answer = false;
        return answer;
    }
}

class Solution {
    public int[] solution(String s) {
        int[] answer = new int [2];
        int check = 0;
        
        while(!s.equals("1")){
            answer[0]++;
            String s2 = "";
            for(int i = 0; i<s.length(); i++){
                if(s.charAt(i) != '0')
                    s2+=s.charAt(i);
                else
                    answer[1]++;
            }
            s = Integer.toBinaryString(s2.length());
        }
        return answer;
    }
}

class Solution {
    public int solution(int n) {
        int answer = 0;
        for(int i = 1; i<=n; i++){
            int sum = 0;
            for(int j = i; j<=n; j++){
                sum+=j;
                if(sum >n)
                    break;
                else if(sum == n){
                    answer++;
                    break;
                }
            }
        }
        return answer;
    }
}


class Solution {
    public int solution(int n) {
        int answer = 0;
        int count = 0;
        String s = Integer.toBinaryString(n);
        int sCount = countOne(s);
        
        for(int i = n+1; ; i++){
            String bs = Integer.toBinaryString(i);
            if(countOne(bs) == sCount){
                answer = i;
                break;
            }
        }
        return answer;
    }
    public int countOne(String s){
        int count = 0;
        for(int i = 0; i<s.length(); i++){
            if(s.charAt(i) == '1')
                count++;
        }
        
        return count;
    }
}

class Solution {
    public int solution(int n) {
        int answer = fibonachi(n);
        return answer;
    }
    public int fibonachi(int n){
        int[] cache = new int[n+1];
        cache[0] = 0;
        cache[1] = 1;
        for(int i = 2; i<=n; i++){
            cache[i] = (cache[i-2]+cache[i-1])%1234567;
        }
        return cache[n];
    }
}

import java.util.*;
class Solution
{
    public int solution(String s)
    {
        int answer = -1;
        
        Stack<Character> st = new Stack<>();
        for(int i = 0; i<s.length(); i++){
            if(st.isEmpty())
                st.push(s.charAt(i));
            else{
                if(st.peek() == s.charAt(i))
                    st.pop();
                else
                    st.push(s.charAt(i));
            }
        }
        
        if(st.isEmpty())
            return 1;
        else
            return 0;
        
    }
}

class Solution {
    public int[] solution(int brown, int yellow) {
        int[] answer = new int[2];
        int total = brown+yellow;
        
        for(int i = 2; i<total; i++){
            if(total % i == 0){
                if(yellow == (i-2)*((total/i)-2)){
                    answer[0] = total/i;
                    answer[1] = i;
                    break;
                }           
            }
        }
        return answer;
    }
}

class Solution {
    public int solution(int[] arr) {
        int answer = 0;
        int m = 1;
        int j = 1;
        
        for(int i = 0; i<arr.length; i++)
            m = Math.max(m, arr[i]);
        
        while(true){
            boolean check = true;
            for(int i = 0; i<arr.length; i++){
                if((m*j)% arr[i] != 0){
                    check = false;
                    break;
                }
            }
            if(check){
                answer = m*j;
                break;
            }
            else
                j++;
        }
        
        return answer;
    }
}

import java.util.ArrayList;
class Solution {
    public int[] solution(int n, String[] words) {
        int[] answer = new int[2];
        Character c = words[0].charAt(words[0].length()-1);
        ArrayList<String> list = new ArrayList<>();
        list.add(words[0]);
        for(int i = 1; i<words.length; i++){
            if(words[i].charAt(0) != c || list.contains(words[i])){
                if((i+1)%n == 0){
                    answer[0] = n;
                    answer[1] = (i+1)/n;
                }
                else{
                    answer[0] = (i+1)%n;
                    answer[1] = ((i+1)/n)+1;
                }
                break;
            }
            c = words[i].charAt(words[i].length()-1);
            list.add(words[i]);        
        }

        

        return answer;
    }
}
