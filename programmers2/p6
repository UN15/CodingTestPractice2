import java.util.Arrays;
class Solution {
    public String solution(String s) {
        String answer = "";
        String[] arr = s.split(" ");
        int[] a = new int[arr.length];
        for(int i = 0; i<arr.length; i++)
            a[i] = Integer.parseInt(arr[i]);
        
        Arrays.sort(a);
        answer+=a[0]+" "+a[a.length-1];
       
        return answer;
    }
}

import java.util.Arrays;
class Solution
{
    public int solution(int []A, int []B)
    {
        int answer = 0;
        
        Arrays.sort(A);
        Arrays.sort(B);  
                
       for(int i = 0; i<A.length; i++)
           answer+=(A[i]*B[B.length-1-i]);
        return answer;
    }
}

import java.util.Stack;
class Solution {
    boolean solution(String s) {
        boolean answer = true;
        Stack<String> st = new Stack();
      
        for(int i = 0; i<s.length(); i++){
            if(s.charAt(i) == '(')
                st.push("(");
            else if(s.charAt(i) == ')'){
                if(st.isEmpty())
                    answer = false;
                else{
                    String p = st.pop();
                    if(!p.equals("("))
                        answer = false;
                }
            } 
        }
        if(!st.isEmpty())
            answer = false;
        return answer;
    }
}

class Solution {
    public int[] solution(String s) {
        int[] answer = new int [2];
        int check = 0;
        
        while(!s.equals("1")){
            answer[0]++;
            String s2 = "";
            for(int i = 0; i<s.length(); i++){
                if(s.charAt(i) != '0')
                    s2+=s.charAt(i);
                else
                    answer[1]++;
            }
            s = Integer.toBinaryString(s2.length());
        }
        return answer;
    }
}

class Solution {
    public int solution(int n) {
        int answer = 0;
        for(int i = 1; i<=n; i++){
            int sum = 0;
            for(int j = i; j<=n; j++){
                sum+=j;
                if(sum >n)
                    break;
                else if(sum == n){
                    answer++;
                    break;
                }
            }
        }
        return answer;
    }
}


class Solution {
    public int solution(int n) {
        int answer = 0;
        int count = 0;
        String s = Integer.toBinaryString(n);
        int sCount = countOne(s);
        
        for(int i = n+1; ; i++){
            String bs = Integer.toBinaryString(i);
            if(countOne(bs) == sCount){
                answer = i;
                break;
            }
        }
        return answer;
    }
    public int countOne(String s){
        int count = 0;
        for(int i = 0; i<s.length(); i++){
            if(s.charAt(i) == '1')
                count++;
        }
        
        return count;
    }
}

class Solution {
    public int solution(int n) {
        int answer = fibonachi(n);
        return answer;
    }
    public int fibonachi(int n){
        int[] cache = new int[n+1];
        cache[0] = 0;
        cache[1] = 1;
        for(int i = 2; i<=n; i++){
            cache[i] = (cache[i-2]+cache[i-1])%1234567;
        }
        return cache[n];
    }
}

import java.util.*;
class Solution
{
    public int solution(String s)
    {
        int answer = -1;
        
        Stack<Character> st = new Stack<>();
        for(int i = 0; i<s.length(); i++){
            if(st.isEmpty())
                st.push(s.charAt(i));
            else{
                if(st.peek() == s.charAt(i))
                    st.pop();
                else
                    st.push(s.charAt(i));
            }
        }
        
        if(st.isEmpty())
            return 1;
        else
            return 0;
        
    }
}

class Solution {
    public int[] solution(int brown, int yellow) {
        int[] answer = new int[2];
        int total = brown+yellow;
        
        for(int i = 2; i<total; i++){
            if(total % i == 0){
                if(yellow == (i-2)*((total/i)-2)){
                    answer[0] = total/i;
                    answer[1] = i;
                    break;
                }           
            }
        }
        return answer;
    }
}

class Solution {
    public int solution(int[] arr) {
        int answer = 0;
        int m = 1;
        int j = 1;
        
        for(int i = 0; i<arr.length; i++)
            m = Math.max(m, arr[i]);
        
        while(true){
            boolean check = true;
            for(int i = 0; i<arr.length; i++){
                if((m*j)% arr[i] != 0){
                    check = false;
                    break;
                }
            }
            if(check){
                answer = m*j;
                break;
            }
            else
                j++;
        }
        
        return answer;
    }
}

import java.util.ArrayList;
class Solution {
    public int[] solution(int n, String[] words) {
        int[] answer = new int[2];
        Character c = words[0].charAt(words[0].length()-1);
        ArrayList<String> list = new ArrayList<>();
        list.add(words[0]);
        for(int i = 1; i<words.length; i++){
            if(words[i].charAt(0) != c || list.contains(words[i])){
                if((i+1)%n == 0){
                    answer[0] = n;
                    answer[1] = (i+1)/n;
                }
                else{
                    answer[0] = (i+1)%n;
                    answer[1] = ((i+1)/n)+1;
                }
                break;
            }
            c = words[i].charAt(words[i].length()-1);
            list.add(words[i]);        
        }

        

        return answer;
    }
}
import java.util.*;
class Solution {
    public int solution(int[] people, int limit) {
        int answer = 0;
		Arrays.sort(people);
        int min = 0;
		for(int max = people.length-1; max>=min; max--){
            if(people[min]+people[max]<=limit){
                answer++;
                min++;
            }
            else
                answer++;
        }
		
        return answer;
    }
}

import java.util.*;
class Solution {
    public int solution(int k, int[] tangerine) {
        int answer = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i<tangerine.length; i++){
            map.put(tangerine[i], map.getOrDefault(tangerine[i], 0)+1);
        }
        ArrayList<Integer> valueList = new ArrayList<>(map.values());
        Collections.sort(valueList, Collections.reverseOrder());
        int count = 0;
        for(int j: valueList){
            if(count+j>=k){
                answer++;
                break;
            }
            else{
                answer++;
                count+=j;
            }        
        }
        
        return answer;
    }
}

class Solution
{
    public int solution(int n, int a, int b)
    {
        int answer = 0;
        while(true){
            a = a/2+a%2;
            b = b/2+b%2;
            answer++;
            if(a == b)
                break;
        }

        return answer;
    }
}

import java.util.Set;
import java.util.HashSet;
class Solution {
    public int solution(int[] elements) {
        int answer = 0;
        Set<Integer> s = new HashSet<>();
        for(int i = 1; i<=elements.length; i++){
            for(int k = 0; k<elements.length; k++){
            	int sum = 0;
                for(int j = k; j<k+i; j++){
                    if(j>elements.length-1)
                    	sum+=elements[j-elements.length];
                    else
                    	sum+=elements[j];
                }
                s.add(sum);
            }
        }
        answer = s.size();
        return answer;
    }
}

import java.util.Stack;
class Solution {
    public int solution(String s) {
        int answer = 0;
        for(int i = 0; i<s.length(); i++){
            Stack<String> st = new Stack<>();
            String nstr = s.substring(i, s.length())+s.substring(0, i);
            for(int j = 0; j<s.length(); j++){
                if(st.isEmpty())
                    st.push(nstr.substring(j, j+1));
                else if(nstr.substring(j, j+1).equals("]") && st.peek().equals("["))
                    st.pop();
                else if(nstr.substring(j, j+1).equals(")") && st.peek().equals("("))
                    st.pop();
                else if(nstr.substring(j, j+1).equals("}") && st.peek().equals("{"))
                    st.pop();
                else
                    st.push(nstr.substring(j, j+1));
            }
            
            if(st.isEmpty())
                answer++;
        }
        
        return answer;
    }
}

import java.util.HashMap;
class Solution {
    public int solution(String[] want, int[] number, String[] discount) {
        int answer = 0;
        HashMap<String, Integer> m2 = new HashMap<>();
        for(int i = 0; i<want.length; i++)
            m2.put(want[i], number[i]);
        
        for(int i = 0; i<=discount.length-10; i++){
            HashMap<String, Integer> m = new HashMap<>();
            for(int j = i; j<i+10; j++){
                m.put(discount[j], m.getOrDefault(discount[j], 0)+1);
            }
            if(m2.equals(m))
                answer++;
        }
        
        return answer;
    }
}

class Solution {
    public int[] solution(int n, long left, long right) {
        int[] answer = new int[(int)right-(int)left+1];
        int j = 0;
        for(long i = left; i<=right; i++){
            long row = i/n;
            long column = i%n;
            answer[j] = Math.max((int)row, (int)column)+1;
            j++;
        }
        return answer;
    }
}

class Solution {
    public int[][] solution(int[][] arr1, int[][] arr2) {
        int[][] answer = new int[arr1.length][arr2[0].length];
        for(int i = 0; i<arr1.length; i++){
            for(int j = 0; j<arr2[0].length; j++){
                int sum = 0;
                for(int k = 0; k < arr2.length; k++) {
			        sum += arr1[i][k] * arr2[k][j];
                }
			 answer[i][j] = sum;
            }        
        }
        return answer;
    }
}

import java.util.*;
class Solution {
    public int solution(int[] citations) {
        int answer = 0;
        Arrays.sort(citations);
        int n = citations.length;
        for(int i = 0; i<n; i++){
            if(citations[i] >= (n-i)){
                answer = n-i; 
                break;
            }
        }
        return answer;
    }
}
//첫 코드 더러움
import java.util.*;
class Solution {
    public int solution(int cacheSize, String[] cities) {
        int answer = 0;
        ArrayList<String> cache = new ArrayList<>();
        for(int i = 0; i<cities.length; i++){
            if(cacheSize == 0){
                answer = cities.length*5;
                break;
            }
            else{
                if(cache.isEmpty()){
                    answer+=5;
                    cache.add(cities[i].toLowerCase());
                }
                else if(cache.size()<cacheSize){
                    if(cache.contains(cities[i].toLowerCase())){
                        cache.remove(cities[i].toLowerCase());
                        cache.add(cities[i].toLowerCase());
                        answer+=1;
                    }
                    else{
                        answer+=5;
                        cache.add(cities[i].toLowerCase());
                    }         
                }
                else if(cache.size()==cacheSize){
                    if(cache.contains(cities[i].toLowerCase())){
                        cache.remove(cities[i].toLowerCase());
                        cache.add(cities[i].toLowerCase());
                        answer+=1;
                    }
                    else{
                        cache.remove(0);
                        cache.add(cities[i].toLowerCase());
                        answer+=5;
                    }
                }
            }
        }
        return answer;
    }
}
//이게 더 깔끔
import java.util.*;
class Solution {
    public int solution(int cacheSize, String[] cities) {
        int answer = 0;
        ArrayList<String> cache = new ArrayList<>();
        for(int i = 0; i<cities.length; i++){
            if(cacheSize == 0){
                answer = cities.length*5;
                break;
            }
            else{
                if(cache.contains(cities[i].toLowerCase())){
                    cache.remove(cities[i].toLowerCase());
                    cache.add(cities[i].toLowerCase());
                    answer+=1;
                }
                else{
                    if(cache.size()<cacheSize){
                        answer+=5;
                        cache.add(cities[i].toLowerCase());
                    }
                    else{
                        cache.remove(0);
                        cache.add(cities[i].toLowerCase());
                        answer+=5;
                    }
                }
            }
        }
        return answer;
    }
}
